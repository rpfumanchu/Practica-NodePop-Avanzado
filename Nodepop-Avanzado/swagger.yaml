swagger: "2.0"
info:
  description: "Api de NodeAPP"
  version: "1.1.0"
  title: "NodeApp"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "petstore.swagger.io"
basePath: "/v2"
tags:
  - name: "catalogue"
    description: "Operations related to catalogue"
    externalDocs:
      description: "Find out more"
      url: "http://swagger.io"
schemes:
  - "https"
  - "http"
paths:
  /api/login:
    post:
      parameters:
        - name: "credentials"
          in: "body"
          description: "User credentials"
          required: true
          schema:
            type: "object"
            properties:
              email:
                type: "string"
              password:
                type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "object"
            properties:
              token:
                type: "string"
  /api/catalogue:
    get:
      tags:
        - "catalogue"
      summary: "Get a list of ads"
      description: "Returns a list of ads based on the provided filters"
      produces:
        - "application/json"
      parameters:
        - name: "name"
          in: "query"
          description: "Filter ads by name (partial match)"
          type: "string"
        - name: "tags"
          in: "query"
          description: "Filter ads by tags"
          type: "string"
        - name: "state"
          in: "query"
          description: "Filter ads by state (true or false)"
          type: "boolean"
        - name: "sort"
          in: "query"
          description: "Sort ads by field (e.g., 'price')"
          type: "string"
        - name: "fields"
          in: "query"
          description: "Specify fields to include in the response"
          type: "string"
        - name: "limit"
          in: "query"
          description: "Limit the number of ads in the response"
          type: "integer"
        - name: "skip"
          in: "query"
          description: "Skip a certain number of ads in the response"
          type: "integer"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "object"
            properties:
              results:
                type: "array"
      security:
        - JWT: []
  /api/catalogue/modify/{id}:
    put:
      tags:
        - "catalogue"
      summary: "Modify an ad"
      description: "Modifies an ad identified by its ID"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the ad to be modified"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Updated ad data"
          required: true
          schema:
            $ref: "#/definitions/AdInput"
      responses:
        200:
          description: "Successful operation"
      security:
        - JWT: []
  /api/catalogue/create:
    post:
      tags:
        - catalogue
      summary: Create an ad
      description: Create a new ad with an uploaded image
      consumes:
        - multipart/form-data
      parameters:
        - name: name
          in: formData
          description: Name of the ad
          required: true
          type: string
        - name: state
          in: formData
          description: State of the ad
          required: true
          type: boolean
        - name: price
          in: formData
          description: Price of the ad
          required: true
          type: number
        - name: tags
          in: formData
          description: Tags for the ad
          required: true
          type: array
          items:
            type: string
        - name: img
          in: formData
          description: Image file for the ad
          type: file
      responses:
        200:
          description: Ad successfully created
        500:
          description: Internal server error
      security:
        - JWT: []

  /api/catalogue/delete/{id}:
    delete:
      tags:
        - Catalogue
      summary: Delete an ad by ID
      parameters:
        - name: id
          in: path
          description: ID of the ad to delete
          required: true
          type: string
      responses:
        200:
          description: Ad successfully deleted
        404:
          description: Ad not found
        500:
          description: Internal server error
      security:
        - JWT: []

  /api/catalogue/range/{price}:
    get:
      tags:
        - Catalogue
      summary: Get ads within a price range
      parameters:
        - name: price
          in: path
          description: Price range filter (example. price between 50-800, smaller than -200, greater than 11000-, exact price 659)
          required: true
          type: string
      responses:
        200:
          description: Successfully retrieved ads within the price range
          schema:
            type: object
            properties:
              results:
                type: array
      security:
        - JWT: []

securityDefinitions:
  JWT:
    type: "apiKey"
    name: "Authorization"
    in: "header"

definitions:
  AdInput:
    type: object
    properties:
      name:
        type: string
      state:
        type: boolean
      price:
        type: number
      tags:
        type: array
        items:
          type: string
      img:
        type: string
